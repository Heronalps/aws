{"paragraphs":[{"title":"Import Spark classes","text":"import org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.mllib.feature.HashingTF\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.classification.NaiveBayes\nimport org.apache.spark.mllib.classification.LogisticRegressionWithLBFGS;\nimport org.apache.spark.mllib.tree.RandomForest\nimport org.apache.spark.mllib.classification.SVMWithSGD\nimport org.apache.spark.mllib.tree.GradientBoostedTrees\nimport org.apache.spark.mllib.tree.configuration.BoostingStrategy\n","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509737197319_1128372600","id":"20171103-192637_633852683","dateCreated":"2017-11-03T19:26:37+0000","dateStarted":"2017-11-04T16:08:07+0000","dateFinished":"2017-11-04T16:08:08+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3703"},{"title":"Ingest sentences","text":"// Load 2 types of emails from text files: spam and ham (non-spam).\n// Each line has text from one email.\nval spam = sc.textFile(\"s3://jsimon-public/spam\")\nval ham = sc.textFile(\"s3://jsimon-public/ham\") ","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509737223343_1183037592","id":"20171103-192703_618600372","dateCreated":"2017-11-03T19:27:03+0000","dateStarted":"2017-11-04T16:08:08+0000","dateFinished":"2017-11-04T16:08:09+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3704"},{"title":"Map sentences to features","text":"// Create a HashingTF instance to map email text to vectors of 1000 features.\nval tf = new HashingTF(numFeatures = 1000)\n// Each email is split into words, and each word is mapped to one feature.\nval spamFeatures = spam.map(email => tf.transform(email.split(\" \")))\nval hamFeatures = ham.map(email => tf.transform(email.split(\" \")))","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509737470454_-1913099748","id":"20171103-193110_69215172","dateCreated":"2017-11-03T19:31:10+0000","dateStarted":"2017-11-04T16:08:08+0000","dateFinished":"2017-11-04T16:08:09+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3705"},{"title":"Label features","text":"// Create LabeledPoint datasets for positive (spam) and negative (ham) examples.\nval positiveExamples = spamFeatures.map(features => LabeledPoint(1, features))\nval negativeExamples = hamFeatures.map(features => LabeledPoint(0, features))","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509737456541_-1289421781","id":"20171103-193056_931431977","dateCreated":"2017-11-03T19:30:56+0000","dateStarted":"2017-11-04T16:08:09+0000","dateFinished":"2017-11-04T16:08:09+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3706"},{"title":"Split data set for training and test","text":"val data = positiveExamples.union(negativeExamples)\ndata.cache()\n// Split the data set 80/20\nval Array(trainingData, testData) = data.randomSplit(Array(0.8, 0.2))\ntrainingData.cache()","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509737490396_-1430193906","id":"20171103-193130_50274934","dateCreated":"2017-11-03T19:31:30+0000","dateStarted":"2017-11-04T16:08:09+0000","dateFinished":"2017-11-04T16:08:10+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3707"},{"title":"Train a SVM model","text":"// https://spark.apache.org/docs/2.2.0/mllib-linear-methods.html#classification\nval numIterations = 100\nval modelSVM = SVMWithSGD.train(trainingData, numIterations)","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509740163605_-1123730231","id":"20171103-201603_1186133349","dateCreated":"2017-11-03T20:16:03+0000","dateStarted":"2017-11-04T16:08:10+0000","dateFinished":"2017-11-04T16:08:16+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3708"},{"title":"Measure accuracy of SVM model","text":"val predictionLabel = testData.map(x=> (modelSVM.predict(x.features),x.label))\nval accuracy = 1.0 * predictionLabel.filter(x => x._1 == x._2).count() / testData.count()","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509811131233_-1438966125","id":"20171104-155851_1157439066","dateCreated":"2017-11-04T15:58:51+0000","dateStarted":"2017-11-04T16:08:10+0000","dateFinished":"2017-11-04T16:08:16+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3709"},{"title":"Train a LR model","text":"// https://spark.apache.org/docs/2.2.0/mllib-linear-methods.html#classification\n// Create a Logistic Regression model which uses the LBFGS optimizer.\nval lr = new LogisticRegressionWithLBFGS()\n// Train learning algorithm on the training data.\nval modelLR = lr.run(trainingData)","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"lineNumbers":false,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509737668641_88642034","id":"20171103-193428_1975982649","dateCreated":"2017-11-03T19:34:28+0000","dateStarted":"2017-11-04T16:08:16+0000","dateFinished":"2017-11-04T16:08:17+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3710"},{"title":"Measure accuracy of LR model","text":"val predictionLabel = testData.map(x=> (modelLR.predict(x.features),x.label))\nval accuracy = 1.0 * predictionLabel.filter(x => x._1 == x._2).count() / testData.count()","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509738386580_-1326420093","id":"20171103-194626_291922664","dateCreated":"2017-11-03T19:46:26+0000","dateStarted":"2017-11-04T16:08:17+0000","dateFinished":"2017-11-04T16:08:18+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3711"},{"title":"Train a Decision Tree model","text":"// https://spark.apache.org/docs/2.2.0/mllib-decision-tree.html\nval numClasses = 2\nval categoricalFeaturesInfo = Map[Int, Int]()\nval numTrees = 16\nval featureSubsetStrategy = \"auto\"\nval impurity = \"gini\"\nval maxDepth = 16\nval maxBins = 16\n\nval modelRF = RandomForest.trainClassifier(trainingData, numClasses, categoricalFeaturesInfo,\n  numTrees, featureSubsetStrategy, impurity, maxDepth, maxBins)\n","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509738679103_-928596832","id":"20171103-195119_1813392511","dateCreated":"2017-11-03T19:51:19+0000","dateStarted":"2017-11-04T16:08:18+0000","dateFinished":"2017-11-04T16:08:22+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3712"},{"title":"Measure accuracy of Decision Tree model","text":"val predictionLabel = testData.map(x=> (modelRF.predict(x.features),x.label))\nval accuracy = 1.0 * predictionLabel.filter(x => x._1 == x._2).count() / testData.count()","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509739333556_1270794803","id":"20171103-200213_1528700725","dateCreated":"2017-11-03T20:02:13+0000","dateStarted":"2017-11-04T16:08:18+0000","dateFinished":"2017-11-04T16:08:22+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3713"},{"title":"Train a Gradient Boosted Trees model","text":"// https://spark.apache.org/docs/2.2.0/mllib-ensembles.html#gradient-boosted-trees-gbts\n// Train a GradientBoostedTrees model.\n// The defaultParams for Classification use LogLoss by default.\nval boostingStrategy = BoostingStrategy.defaultParams(\"Classification\")\nboostingStrategy.numIterations = 10\nboostingStrategy.treeStrategy.numClasses = 2\nboostingStrategy.treeStrategy.maxDepth = 5\n// Empty categoricalFeaturesInfo indicates all features are continuous.\nboostingStrategy.treeStrategy.categoricalFeaturesInfo = Map[Int, Int]()\n\nval modelGBT = GradientBoostedTrees.train(trainingData, boostingStrategy)","user":"anonymous","dateUpdated":"2017-11-04T16:10:08+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509811165642_-1226722650","id":"20171104-155925_2002383494","dateCreated":"2017-11-04T15:59:25+0000","dateStarted":"2017-11-04T16:08:22+0000","dateFinished":"2017-11-04T16:08:41+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3714"},{"title":"Measure accuracy of Gradient Boosted Trees model","text":"val predictionLabel = testData.map(x=> (modelGBT.predict(x.features),x.label))\nval accuracy = 1.0 * predictionLabel.filter(x => x._1 == x._2).count() / testData.count()","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509811351458_-637043792","id":"20171104-160231_214850096","dateCreated":"2017-11-04T16:02:31+0000","dateStarted":"2017-11-04T16:08:23+0000","dateFinished":"2017-11-04T16:08:41+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3715"},{"title":"Train a Naive Bayes model","text":"// https://spark.apache.org/docs/2.2.0/mllib-naive-bayes.html\nval modelBayes = NaiveBayes.train(trainingData, 1.0)","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509737504109_1095898806","id":"20171103-193144_439637897","dateCreated":"2017-11-03T19:31:44+0000","dateStarted":"2017-11-04T16:08:41+0000","dateFinished":"2017-11-04T16:08:41+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3716"},{"title":"Measure accuracy of Naive Bayes model","text":"val predictionLabel = testData.map(x=> (modelBayes.predict(x.features),x.label))\nval accuracy = 1.0 * predictionLabel.filter(x => x._1 == x._2).count() / testData.count()","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509737519396_-490790333","id":"20171103-193159_224907724","dateCreated":"2017-11-03T19:31:59+0000","dateStarted":"2017-11-04T16:08:41+0000","dateFinished":"2017-11-04T16:08:42+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3717"},{"title":"Try new samples","text":"val posTestExample = tf.transform(\"You have won $1,000,000. Please fly to Nigeria ASAP\".split(\" \"))\nval negTestExample = tf.transform(\"Hi Mom, I started studying Spark the other day, it's awesome\".split(\" \"))\n\nmodelBayes.predict(posTestExample)\nmodelBayes.predict(negTestExample)\nprintln(s\"Prediction for positive test example: ${modelBayes.predict(posTestExample)}\")\nprintln(s\"Prediction for negative test example: ${modelBayes.predict(negTestExample)}\")","user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509739413691_-801539394","id":"20171103-200333_1832806360","dateCreated":"2017-11-03T20:03:33+0000","dateStarted":"2017-11-04T16:08:42+0000","dateFinished":"2017-11-04T16:08:42+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3718"},{"user":"anonymous","dateUpdated":"2017-11-04T16:09:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509811387166_465123889","id":"20171104-160307_946818638","dateCreated":"2017-11-04T16:03:07+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3719"}],"name":"Spam classifier","id":"2CWZ4G4SP","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}